{"file":"ion-radio-group.entry.esm.js","mappings":"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","names":[],"sources":["./node_modules/@ionic/core/dist/collection/components/radio-group/radio-group.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from '@stencil/core';\nimport { getIonMode } from '../../global/ionic-global';\nimport { renderHiddenInput } from '../../utils/helpers';\nexport class RadioGroup {\n  constructor() {\n    this.inputId = `ion-rg-${radioGroupIds++}`;\n    this.labelId = `${this.inputId}-lbl`;\n    this.setRadioTabindex = (value) => {\n      const radios = this.getRadios();\n      // Get the first radio that is not disabled and the checked one\n      const first = radios.find((radio) => !radio.disabled);\n      const checked = radios.find((radio) => radio.value === value && !radio.disabled);\n      if (!first && !checked) {\n        return;\n      }\n      // If an enabled checked radio exists, set it to be the focusable radio\n      // otherwise we default to focus the first radio\n      const focusable = checked || first;\n      for (const radio of radios) {\n        const tabindex = radio === focusable ? 0 : -1;\n        radio.setButtonTabindex(tabindex);\n      }\n    };\n    this.onClick = (ev) => {\n      ev.preventDefault();\n      /**\n       * The Radio Group component mandates that only one radio button\n       * within the group can be selected at any given time. Since `ion-radio`\n       * is a shadow DOM component, it cannot natively perform this behavior\n       * using the `name` attribute.\n       */\n      const selectedRadio = ev.target && ev.target.closest('ion-radio');\n      if (selectedRadio) {\n        const currentValue = this.value;\n        const newValue = selectedRadio.value;\n        if (newValue !== currentValue) {\n          this.value = newValue;\n          this.emitValueChange(ev);\n        }\n        else if (this.allowEmptySelection) {\n          this.value = undefined;\n          this.emitValueChange(ev);\n        }\n      }\n    };\n    this.allowEmptySelection = false;\n    this.name = this.inputId;\n    this.value = undefined;\n  }\n  valueChanged(value) {\n    this.setRadioTabindex(value);\n    this.ionValueChange.emit({ value });\n  }\n  componentDidLoad() {\n    this.setRadioTabindex(this.value);\n  }\n  async connectedCallback() {\n    // Get the list header if it exists and set the id\n    // this is used to set aria-labelledby\n    const header = this.el.querySelector('ion-list-header') || this.el.querySelector('ion-item-divider');\n    if (header) {\n      const label = (this.label = header.querySelector('ion-label'));\n      if (label) {\n        this.labelId = label.id = this.name + '-lbl';\n      }\n    }\n  }\n  getRadios() {\n    return Array.from(this.el.querySelectorAll('ion-radio'));\n  }\n  /**\n   * Emits an `ionChange` event.\n   *\n   * This API should be called for user committed changes.\n   * This API should not be used for external value changes.\n   */\n  emitValueChange(event) {\n    const { value } = this;\n    this.ionChange.emit({ value, event });\n  }\n  onKeydown(ev) {\n    const inSelectPopover = !!this.el.closest('ion-select-popover');\n    if (ev.target && !this.el.contains(ev.target)) {\n      return;\n    }\n    // Get all radios inside of the radio group and then\n    // filter out disabled radios since we need to skip those\n    const radios = this.getRadios().filter((radio) => !radio.disabled);\n    // Only move the radio if the current focus is in the radio group\n    if (ev.target && radios.includes(ev.target)) {\n      const index = radios.findIndex((radio) => radio === ev.target);\n      const current = radios[index];\n      let next;\n      // If hitting arrow down or arrow right, move to the next radio\n      // If we're on the last radio, move to the first radio\n      if (['ArrowDown', 'ArrowRight'].includes(ev.key)) {\n        next = index === radios.length - 1 ? radios[0] : radios[index + 1];\n      }\n      // If hitting arrow up or arrow left, move to the previous radio\n      // If we're on the first radio, move to the last radio\n      if (['ArrowUp', 'ArrowLeft'].includes(ev.key)) {\n        next = index === 0 ? radios[radios.length - 1] : radios[index - 1];\n      }\n      if (next && radios.includes(next)) {\n        next.setFocus(ev);\n        if (!inSelectPopover) {\n          this.value = next.value;\n          this.emitValueChange(ev);\n        }\n      }\n      // Update the radio group value when a user presses the\n      // space bar on top of a selected radio\n      if ([' '].includes(ev.key)) {\n        const previousValue = this.value;\n        this.value = this.allowEmptySelection && this.value !== undefined ? undefined : current.value;\n        if (previousValue !== this.value || this.allowEmptySelection) {\n          /**\n           * Value change should only be emitted if the value is different,\n           * such as selecting a new radio with the space bar or if\n           * the radio group allows for empty selection and the user\n           * is deselecting a checked radio.\n           */\n          this.emitValueChange(ev);\n        }\n        // Prevent browsers from jumping\n        // to the bottom of the screen\n        ev.preventDefault();\n      }\n    }\n  }\n  render() {\n    const { label, labelId, el, name, value } = this;\n    const mode = getIonMode(this);\n    renderHiddenInput(true, el, name, value, false);\n    return h(Host, { role: \"radiogroup\", \"aria-labelledby\": label ? labelId : null, onClick: this.onClick, class: mode });\n  }\n  static get is() { return \"ion-radio-group\"; }\n  static get properties() {\n    return {\n      \"allowEmptySelection\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"If `true`, the radios can be deselected.\"\n        },\n        \"attribute\": \"allow-empty-selection\",\n        \"reflect\": false,\n        \"defaultValue\": \"false\"\n      },\n      \"name\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"string\",\n          \"resolved\": \"string\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The name of the control, which is submitted with the form data.\"\n        },\n        \"attribute\": \"name\",\n        \"reflect\": false,\n        \"defaultValue\": \"this.inputId\"\n      },\n      \"value\": {\n        \"type\": \"any\",\n        \"mutable\": true,\n        \"complexType\": {\n          \"original\": \"any | null\",\n          \"resolved\": \"any\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"the value of the radio group.\"\n        },\n        \"attribute\": \"value\",\n        \"reflect\": false\n      }\n    };\n  }\n  static get events() {\n    return [{\n        \"method\": \"ionChange\",\n        \"name\": \"ionChange\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Emitted when the value has changed.\"\n        },\n        \"complexType\": {\n          \"original\": \"RadioGroupChangeEventDetail\",\n          \"resolved\": \"RadioGroupChangeEventDetail<any>\",\n          \"references\": {\n            \"RadioGroupChangeEventDetail\": {\n              \"location\": \"import\",\n              \"path\": \"./radio-group-interface\"\n            }\n          }\n        }\n      }, {\n        \"method\": \"ionValueChange\",\n        \"name\": \"ionValueChange\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"internal\",\n              \"text\": undefined\n            }],\n          \"text\": \"Emitted when the `value` property has changed.\\nThis is used to ensure that `ion-radio` can respond\\nto any value property changes from the group.\"\n        },\n        \"complexType\": {\n          \"original\": \"RadioGroupChangeEventDetail\",\n          \"resolved\": \"RadioGroupChangeEventDetail<any>\",\n          \"references\": {\n            \"RadioGroupChangeEventDetail\": {\n              \"location\": \"import\",\n              \"path\": \"./radio-group-interface\"\n            }\n          }\n        }\n      }];\n  }\n  static get elementRef() { return \"el\"; }\n  static get watchers() {\n    return [{\n        \"propName\": \"value\",\n        \"methodName\": \"valueChanged\"\n      }];\n  }\n  static get listeners() {\n    return [{\n        \"name\": \"keydown\",\n        \"method\": \"onKeydown\",\n        \"target\": \"document\",\n        \"capture\": false,\n        \"passive\": false\n      }];\n  }\n}\nlet radioGroupIds = 0;\n"],"version":3}