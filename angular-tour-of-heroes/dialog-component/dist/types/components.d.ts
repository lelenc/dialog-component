/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { Answer, DialogData, DialogMetadata, Fragment, Result } from "./interfaces/dialog-interfaces";
export { Answer, DialogData, DialogMetadata, Fragment, Result } from "./interfaces/dialog-interfaces";
export namespace Components {
    interface DescriptionComponent {
        "data": DialogMetadata;
        "sessionName": string;
    }
    interface DialogComponent {
        "birthyear"?: number;
        "caseId": string;
        "date": string;
        "dialogData": DialogData;
        "dialogMetadata": DialogMetadata;
        "education"?: string;
        "email": string;
        "iri": string;
        "lastLocale": string;
        "locale": string;
        "params": Map<string, string>;
        "player_id": number;
        "region": number;
        "sex"?: number;
    }
    interface ResultComponent {
        "lastLocale": string;
        "locale": string;
        "resultData": Result;
    }
    interface StepComponent {
        "answerValue": any;
        "controlDisabled": boolean;
        "fragment": Fragment;
        "lastLocale": string;
        "locale": string;
    }
    interface StepQuestion {
        "fragment": Fragment;
        "isActiveQuestion": boolean;
    }
}
export interface StepComponentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLStepComponentElement;
}
declare global {
    interface HTMLDescriptionComponentElement extends Components.DescriptionComponent, HTMLStencilElement {
    }
    var HTMLDescriptionComponentElement: {
        prototype: HTMLDescriptionComponentElement;
        new (): HTMLDescriptionComponentElement;
    };
    interface HTMLDialogComponentElement extends Components.DialogComponent, HTMLStencilElement {
    }
    var HTMLDialogComponentElement: {
        prototype: HTMLDialogComponentElement;
        new (): HTMLDialogComponentElement;
    };
    interface HTMLResultComponentElement extends Components.ResultComponent, HTMLStencilElement {
    }
    var HTMLResultComponentElement: {
        prototype: HTMLResultComponentElement;
        new (): HTMLResultComponentElement;
    };
    interface HTMLStepComponentElement extends Components.StepComponent, HTMLStencilElement {
    }
    var HTMLStepComponentElement: {
        prototype: HTMLStepComponentElement;
        new (): HTMLStepComponentElement;
    };
    interface HTMLStepQuestionElement extends Components.StepQuestion, HTMLStencilElement {
    }
    var HTMLStepQuestionElement: {
        prototype: HTMLStepQuestionElement;
        new (): HTMLStepQuestionElement;
    };
    interface HTMLElementTagNameMap {
        "description-component": HTMLDescriptionComponentElement;
        "dialog-component": HTMLDialogComponentElement;
        "result-component": HTMLResultComponentElement;
        "step-component": HTMLStepComponentElement;
        "step-question": HTMLStepQuestionElement;
    }
}
declare namespace LocalJSX {
    interface DescriptionComponent {
        "data"?: DialogMetadata;
        "sessionName"?: string;
    }
    interface DialogComponent {
        "birthyear"?: number;
        "caseId"?: string;
        "date"?: string;
        "dialogData"?: DialogData;
        "dialogMetadata"?: DialogMetadata;
        "education"?: string;
        "email"?: string;
        "iri"?: string;
        "lastLocale"?: string;
        "locale"?: string;
        "params"?: Map<string, string>;
        "player_id"?: number;
        "region"?: number;
        "sex"?: number;
    }
    interface ResultComponent {
        "lastLocale"?: string;
        "locale"?: string;
        "resultData"?: Result;
    }
    interface StepComponent {
        "answerValue"?: any;
        "controlDisabled"?: boolean;
        "fragment"?: Fragment;
        "lastLocale"?: string;
        "locale"?: string;
        "onAnswer"?: (event: StepComponentCustomEvent<Answer>) => void;
        "onRevokeAnswer"?: (event: StepComponentCustomEvent<Answer>) => void;
    }
    interface StepQuestion {
        "fragment"?: Fragment;
        "isActiveQuestion"?: boolean;
    }
    interface IntrinsicElements {
        "description-component": DescriptionComponent;
        "dialog-component": DialogComponent;
        "result-component": ResultComponent;
        "step-component": StepComponent;
        "step-question": StepQuestion;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "description-component": LocalJSX.DescriptionComponent & JSXBase.HTMLAttributes<HTMLDescriptionComponentElement>;
            "dialog-component": LocalJSX.DialogComponent & JSXBase.HTMLAttributes<HTMLDialogComponentElement>;
            "result-component": LocalJSX.ResultComponent & JSXBase.HTMLAttributes<HTMLResultComponentElement>;
            "step-component": LocalJSX.StepComponent & JSXBase.HTMLAttributes<HTMLStepComponentElement>;
            "step-question": LocalJSX.StepQuestion & JSXBase.HTMLAttributes<HTMLStepQuestionElement>;
        }
    }
}
