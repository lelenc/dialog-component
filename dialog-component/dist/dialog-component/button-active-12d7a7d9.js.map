{"file":"button-active-12d7a7d9.js","mappings":";;;;AAAA;AACA;AACA;AAIY,MAAC,yBAAyB,GAAG,CAAC,EAAE,EAAE,QAAQ,KAAK;AAC3D,EAAE,IAAI,oBAAoB,CAAC;AAC3B,EAAE,IAAI,oBAAoB,CAAC;AAC3B,EAAE,MAAM,qBAAqB,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,gBAAgB,KAAK;AAC5D,IAAI,IAAI,OAAO,QAAQ,KAAK,WAAW,EAAE;AACzC,MAAM,OAAO;AACb,KAAK;AACL,IAAI,MAAM,MAAM,GAAG,QAAQ,CAAC,gBAAgB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACnD,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;AACtC,MAAM,iBAAiB,EAAE,CAAC;AAC1B,MAAM,OAAO;AACb,KAAK;AACL,IAAI,IAAI,MAAM,KAAK,oBAAoB,EAAE;AACzC,MAAM,iBAAiB,EAAE,CAAC;AAC1B,MAAM,eAAe,CAAC,MAAM,EAAE,gBAAgB,CAAC,CAAC;AAChD,KAAK;AACL,GAAG,CAAC;AACJ,EAAE,MAAM,eAAe,GAAG,CAAC,MAAM,EAAE,gBAAgB,KAAK;AACxD,IAAI,oBAAoB,GAAG,MAAM,CAAC;AAClC,IAAI,IAAI,CAAC,oBAAoB,EAAE;AAC/B,MAAM,oBAAoB,GAAG,oBAAoB,CAAC;AAClD,KAAK;AACL,IAAI,MAAM,cAAc,GAAG,oBAAoB,CAAC;AAChD,IAAI,SAAS,CAAC,MAAM,cAAc,CAAC,SAAS,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,CAAC;AACnE,IAAI,gBAAgB,EAAE,CAAC;AACvB,GAAG,CAAC;AACJ,EAAE,MAAM,iBAAiB,GAAG,CAAC,aAAa,GAAG,KAAK,KAAK;AACvD,IAAI,IAAI,CAAC,oBAAoB,EAAE;AAC/B,MAAM,OAAO;AACb,KAAK;AACL,IAAI,MAAM,cAAc,GAAG,oBAAoB,CAAC;AAChD,IAAI,SAAS,CAAC,MAAM,cAAc,CAAC,SAAS,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,aAAa,IAAI,oBAAoB,KAAK,oBAAoB,EAAE;AACxE,MAAM,oBAAoB,CAAC,KAAK,EAAE,CAAC;AACnC,KAAK;AACL,IAAI,oBAAoB,GAAG,SAAS,CAAC;AACrC,GAAG,CAAC;AACJ,EAAE,OAAO,aAAa,CAAC;AACvB,IAAI,EAAE;AACN,IAAI,WAAW,EAAE,kBAAkB;AACnC,IAAI,SAAS,EAAE,CAAC;AAChB,IAAI,OAAO,EAAE,CAAC,EAAE,KAAK,qBAAqB,CAAC,EAAE,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,EAAE,oBAAoB,CAAC;AAC1F,IAAI,MAAM,EAAE,CAAC,EAAE,KAAK,qBAAqB,CAAC,EAAE,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,EAAE,sBAAsB,CAAC;AAC3F,IAAI,KAAK,EAAE,MAAM;AACjB,MAAM,iBAAiB,CAAC,IAAI,CAAC,CAAC;AAC9B,MAAM,kBAAkB,EAAE,CAAC;AAC3B,MAAM,oBAAoB,GAAG,SAAS,CAAC;AACvC,KAAK;AACL,GAAG,CAAC,CAAC;AACL;;;;","names":[],"sources":["./node_modules/@ionic/core/dist/collection/utils/gesture/button-active.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { writeTask } from '@stencil/core';\nimport { hapticSelectionChanged, hapticSelectionEnd, hapticSelectionStart } from '../native/haptic';\nimport { createGesture } from './index';\nexport const createButtonActiveGesture = (el, isButton) => {\n  let currentTouchedButton;\n  let initialTouchedButton;\n  const activateButtonAtPoint = (x, y, hapticFeedbackFn) => {\n    if (typeof document === 'undefined') {\n      return;\n    }\n    const target = document.elementFromPoint(x, y);\n    if (!target || !isButton(target)) {\n      clearActiveButton();\n      return;\n    }\n    if (target !== currentTouchedButton) {\n      clearActiveButton();\n      setActiveButton(target, hapticFeedbackFn);\n    }\n  };\n  const setActiveButton = (button, hapticFeedbackFn) => {\n    currentTouchedButton = button;\n    if (!initialTouchedButton) {\n      initialTouchedButton = currentTouchedButton;\n    }\n    const buttonToModify = currentTouchedButton;\n    writeTask(() => buttonToModify.classList.add('ion-activated'));\n    hapticFeedbackFn();\n  };\n  const clearActiveButton = (dispatchClick = false) => {\n    if (!currentTouchedButton) {\n      return;\n    }\n    const buttonToModify = currentTouchedButton;\n    writeTask(() => buttonToModify.classList.remove('ion-activated'));\n    /**\n     * Clicking on one button, but releasing on another button\n     * does not dispatch a click event in browsers, so we\n     * need to do it manually here. Some browsers will\n     * dispatch a click if clicking on one button, dragging over\n     * another button, and releasing on the original button. In that\n     * case, we need to make sure we do not cause a double click there.\n     */\n    if (dispatchClick && initialTouchedButton !== currentTouchedButton) {\n      currentTouchedButton.click();\n    }\n    currentTouchedButton = undefined;\n  };\n  return createGesture({\n    el,\n    gestureName: 'buttonActiveDrag',\n    threshold: 0,\n    onStart: (ev) => activateButtonAtPoint(ev.currentX, ev.currentY, hapticSelectionStart),\n    onMove: (ev) => activateButtonAtPoint(ev.currentX, ev.currentY, hapticSelectionChanged),\n    onEnd: () => {\n      clearActiveButton(true);\n      hapticSelectionEnd();\n      initialTouchedButton = undefined;\n    },\n  });\n};\n"],"version":3}