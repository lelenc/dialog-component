{"file":"ion-picker-column-internal.entry.esm.js","mappings":";;;;;;AAAA,MAAM,0BAA0B,GAAG,mlCAAmlC;;ACAtnC,MAAM,yBAAyB,GAAG,yoCAAyoC;;MCa9pC,oBAAoB;EAC/B;;;IACE,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;IACzB,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;IAC7B,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;IAC7B,IAAI,CAAC,sBAAsB,GAAG,CAAC,MAAM,EAAE,MAAM,GAAG,IAAI,EAAE,gBAAgB,GAAG,IAAI;MAC3E,MAAM,EAAE,EAAE,EAAE,eAAe,EAAE,GAAG,IAAI,CAAC;MACrC,IAAI,eAAe,EAAE;;QAEnB,MAAM,GAAG,GAAG,MAAM,CAAC,SAAS,GAAG,CAAC,GAAG,MAAM,CAAC,YAAY,GAAG,MAAM,CAAC,YAAY,GAAG,CAAC,CAAC;QACjF,IAAI,EAAE,CAAC,SAAS,KAAK,GAAG,EAAE;;;;;;;;UAQxB,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;UACzC,EAAE,CAAC,MAAM,CAAC;YACR,GAAG;YACH,IAAI,EAAE,CAAC;YACP,QAAQ,EAAE,MAAM,GAAG,QAAQ,GAAG,SAAS;WACxC,CAAC,CAAC;SACJ;OACF;KACF,CAAC;;;;;;IAMF,IAAI,CAAC,eAAe,GAAG,CAAC,EAAE;MACxB,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;QACtB,OAAO;OACR;MACD,MAAM,EAAE,YAAY,EAAE,eAAe,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC;;;;;MAKpD,MAAM,cAAc,GAAG,eAAe,KAAK,SAAS,IAAI,eAAe,KAAK,IAAI,CAAC,EAAE,CAAC;MACpF,IAAI,CAAC,YAAY,IAAI,CAAC,cAAc,EAAE;QACpC,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;QAC/B,OAAO;OACR;MACD,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;KAC/B,CAAC;;;;;;;;;IASF,IAAI,CAAC,kBAAkB,GAAG,CAAC,KAAK;MAC9B,IAAI,IAAI,CAAC,WAAW,EAAE;QACpB,IAAI,CAAC,iBAAiB,GAAG;UACvB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;SACvB,CAAC;QACF,OAAO;OACR;MACD,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;KACvB,CAAC;;;;;;;IAOF,IAAI,CAAC,wBAAwB,GAAG;;;;;;MAM9B,MAAM,aAAa,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;MACxC,MAAM,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC;MACpB,IAAI,OAAO,CAAC;MACZ,IAAI,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC;MAC/B,MAAM,cAAc,GAAG;QACrB,GAAG,CAAC;UACF,IAAI,OAAO,EAAE;YACX,YAAY,CAAC,OAAO,CAAC,CAAC;YACtB,OAAO,GAAG,SAAS,CAAC;WACrB;UACD,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YACrB,aAAa,IAAI,oBAAoB,EAAE,CAAC;YACxC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;WACzB;;;;;UAKD,MAAM,IAAI,GAAG,EAAE,CAAC,qBAAqB,EAAE,CAAC;UACxC,MAAM,OAAO,GAAG,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;UACxC,MAAM,OAAO,GAAG,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;UACzC,MAAM,aAAa,GAAG,EAAE,CAAC,UAAU,CAAC,gBAAgB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;UACvE,IAAI,QAAQ,KAAK,IAAI,EAAE;YACrB,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;WAC9C;UACD,IAAI,aAAa,KAAK,IAAI,IAAI,aAAa,CAAC,QAAQ,EAAE;YACpD,OAAO;WACR;;;;;UAKD,IAAI,aAAa,KAAK,QAAQ,EAAE;YAC9B,aAAa,IAAI,sBAAsB,EAAE,CAAC;YAC1C,IAAI,IAAI,CAAC,gBAAgB,EAAE;;;;;;;;;;;;cAYzB,IAAI,CAAC,aAAa,EAAE,CAAC;aACtB;WACF;UACD,QAAQ,GAAG,aAAa,CAAC;UACzB,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;UAC/C,OAAO,GAAG,UAAU,CAAC;YACnB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;YACzB,aAAa,IAAI,kBAAkB,EAAE,CAAC;;;;;;;YAOtC,MAAM,EAAE,iBAAiB,EAAE,GAAG,IAAI,CAAC;YACnC,IAAI,iBAAiB,EAAE;cACrB,iBAAiB,EAAE,CAAC;cACpB,IAAI,CAAC,iBAAiB,GAAG,SAAS,CAAC;aACpC;;;;;;;YAOD,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;YAC7B,MAAM,SAAS,GAAG,aAAa,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;;;;;;YAM3D,IAAI,SAAS,KAAK,IAAI,EAAE;cACtB,OAAO;aACR;YACD,MAAM,KAAK,GAAG,QAAQ,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YACtC,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACvC,IAAI,YAAY,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,EAAE;cACrC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;aACnC;WACF,EAAE,GAAG,CAAC,CAAC;SACT,CAAC,CAAC;OACJ,CAAC;;;;;MAKF,GAAG,CAAC;QACF,EAAE,CAAC,gBAAgB,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;QAC9C,IAAI,CAAC,qBAAqB,GAAG;UAC3B,EAAE,CAAC,mBAAmB,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;SAClD,CAAC;OACH,CAAC,CAAC;KACJ,CAAC;;;;;;;;IAQF,IAAI,CAAC,aAAa,GAAG;MACnB,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC;MAC1B,IAAI,QAAQ,IAAI,IAAI;QAClB,OAAO;MACT,QAAQ,CAAC,aAAa,EAAE,CAAC;;;;;;;;;MASzB,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC;KAClD,CAAC;IACF,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;IACtB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;IAChB,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;IACvB,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;IACvB,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;GAC3B;EACD,WAAW;IACT,IAAI,IAAI,CAAC,eAAe,EAAE;;;;;MAKxB,IAAI,CAAC,wBAAwB,EAAE,CAAC;KACjC;GACF;;;;;;;EAOD,iBAAiB;IACf,MAAM,eAAe,GAAG,CAAC,OAAO;MAC9B,IAAI,EAAE,CAAC;MACP,MAAM,EAAE,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;MACtB,IAAI,EAAE,CAAC,cAAc,EAAE;QACrB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;;;;;QAK5B,MAAM,SAAS,GAAG,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,aAAa,CAAC,IAAI,iBAAiB,EAAE,CAAC,CAAC;QACjF,SAAS,KAAK,IAAI,IAAI,SAAS,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;QACpG,IAAI,CAAC,wBAAwB,EAAE,CAAC;QAChC,CAAC,EAAE,GAAG,IAAI,CAAC,UAAU,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;QAChG,IAAI,CAAC,wBAAwB,EAAE,CAAC;OACjC;WACI;QACH,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;QAC7B,IAAI,IAAI,CAAC,qBAAqB,EAAE;UAC9B,IAAI,CAAC,qBAAqB,EAAE,CAAC;UAC7B,IAAI,CAAC,qBAAqB,GAAG,SAAS,CAAC;SACxC;OACF;KACF,CAAC;IACF,IAAI,oBAAoB,CAAC,eAAe,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACjF,MAAM,QAAQ,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAC1E,IAAI,QAAQ,KAAK,IAAI,EAAE;;MAErB,QAAQ,CAAC,gBAAgB,CAAC,oBAAoB,EAAE,CAAC,EAAE,KAAK,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC;KACnF;GACF;EACD,kBAAkB;IAChB,IAAI,EAAE,CAAC;IACP,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,eAAe,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;IAC3D,IAAI,eAAe,EAAE;MACnB,IAAI,UAAU,EAAE;QACd,IAAI,CAAC,wBAAwB,EAAE,CAAC;OACjC;WACI,IAAI,CAAC,CAAC,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,MAAM,IAAI,IAAI,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,KAAK,MAAM,KAAK,EAAE;;;;;;;;QAQlF,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;OAC/B;KACF;GACF;;EAED,MAAM,wBAAwB;IAC5B,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC;IACjC,IAAI,QAAQ,EAAE;MACZ,IAAI,CAAC,sBAAsB,CAAC,QAAQ,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;KACrD;GACF;;;;;;;;EAQD,MAAM,QAAQ,CAAC,KAAK;IAClB,MAAM,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC;IACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACnB,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,KAAK,KAAK,KAAK,IAAI,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,CAAC;IACtF,IAAI,QAAQ,EAAE;MACZ,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KAC/B;GACF;EACD,IAAI,UAAU;IACZ,OAAO,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,aAAa,CAAC,4BAA4B,IAAI,CAAC,KAAK,oBAAoB,CAAC,CAAC;GAC1G;EACD,MAAM;IACJ,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC;IACtD,MAAM,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;IAC9B,QAAQ,CAAC,CAAC,IAAI,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,KAAK,EAAE,kBAAkB,CAAC,KAAK,EAAE;QAC5D,CAAC,IAAI,GAAG,IAAI;QACZ,CAAC,sBAAsB,GAAG,QAAQ;QAClC,CAAC,6BAA6B,GAAG,YAAY;OAC9C,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,EAAE,EAAE,KAAK,EAAE,+BAA+B,EAAE,aAAa,EAAE,MAAM,EAAE,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC,KAAK,EAAE,EAAE,KAAK,EAAE,+BAA+B,EAAE,aAAa,EAAE,MAAM,EAAE,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC,KAAK,EAAE,EAAE,KAAK,EAAE,+BAA+B,EAAE,aAAa,EAAE,MAAM,EAAE,EAAE,QAAQ,CAAC,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,KAAK;MACjS;;;;;;;;;OASC;MACD,QAAQ,CAAC,CAAC,QAAQ,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,KAAK,EAAE;UACzC,aAAa,EAAE,IAAI;UACnB,sBAAsB,EAAE,IAAI,CAAC,QAAQ,IAAI,KAAK;SAC/C,EAAE,YAAY,EAAE,IAAI,CAAC,KAAK,EAAE,YAAY,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,EAAE;UAC5D,IAAI,CAAC,sBAAsB,CAAC,EAAE,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;SAC9C,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE;KAC7C,CAAC,EAAE,CAAC,CAAC,KAAK,EAAE,EAAE,KAAK,EAAE,+BAA+B,EAAE,aAAa,EAAE,MAAM,EAAE,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC,KAAK,EAAE,EAAE,KAAK,EAAE,+BAA+B,EAAE,aAAa,EAAE,MAAM,EAAE,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC,KAAK,EAAE,EAAE,KAAK,EAAE,+BAA+B,EAAE,aAAa,EAAE,MAAM,EAAE,EAAE,QAAQ,CAAC,CAAC,EAAE;GAC3Q;;;;;;AAsLH,MAAM,iBAAiB,GAAG,oBAAoB,CAAC;;;;;;;;","names":[],"sources":["./node_modules/@ionic/core/dist/collection/components/picker-column-internal/picker-column-internal.ios.css?tag=ion-picker-column-internal&mode=ios&encapsulation=shadow","./node_modules/@ionic/core/dist/collection/components/picker-column-internal/picker-column-internal.md.css?tag=ion-picker-column-internal&mode=md&encapsulation=shadow","./node_modules/@ionic/core/dist/collection/components/picker-column-internal/picker-column-internal.js"],"sourcesContent":[":host {\n  -webkit-padding-start: 16px;\n  padding-inline-start: 16px;\n  -webkit-padding-end: 16px;\n  padding-inline-end: 16px;\n  padding-top: 0px;\n  padding-bottom: 0px;\n  height: 200px;\n  outline: none;\n  font-size: 22px;\n  scroll-snap-type: y mandatory;\n  /**\n   * Need to explicitly set overflow-x: hidden\n   * for older implementations of scroll snapping.\n   */\n  overflow-x: hidden;\n  overflow-y: scroll;\n  scrollbar-width: none;\n  text-align: center;\n}\n\n/**\n * Hide scrollbars on Chrome and Safari\n */\n:host::-webkit-scrollbar {\n  display: none;\n}\n\n:host .picker-item {\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  display: block;\n  width: 100%;\n  height: 34px;\n  border: 0px;\n  outline: none;\n  background: transparent;\n  color: inherit;\n  font-family: var(--ion-font-family, inherit);\n  font-size: inherit;\n  line-height: 34px;\n  text-align: inherit;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  cursor: pointer;\n  overflow: hidden;\n  scroll-snap-align: center;\n}\n\n:host .picker-item-empty,\n:host .picker-item.picker-item-disabled {\n  scroll-snap-align: none;\n  cursor: default;\n}\n\n:host .picker-item.picker-item-disabled {\n  opacity: 0.4;\n}\n\n:host(.picker-column-active) .picker-item.picker-item-active {\n  color: var(--ion-color-base);\n}\n\n@media (any-hover: hover) {\n  :host(:focus) {\n    outline: none;\n    background: rgba(var(--ion-color-base-rgb), 0.2);\n  }\n}",":host {\n  -webkit-padding-start: 16px;\n  padding-inline-start: 16px;\n  -webkit-padding-end: 16px;\n  padding-inline-end: 16px;\n  padding-top: 0px;\n  padding-bottom: 0px;\n  height: 200px;\n  outline: none;\n  font-size: 22px;\n  scroll-snap-type: y mandatory;\n  /**\n   * Need to explicitly set overflow-x: hidden\n   * for older implementations of scroll snapping.\n   */\n  overflow-x: hidden;\n  overflow-y: scroll;\n  scrollbar-width: none;\n  text-align: center;\n}\n\n/**\n * Hide scrollbars on Chrome and Safari\n */\n:host::-webkit-scrollbar {\n  display: none;\n}\n\n:host .picker-item {\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  display: block;\n  width: 100%;\n  height: 34px;\n  border: 0px;\n  outline: none;\n  background: transparent;\n  color: inherit;\n  font-family: var(--ion-font-family, inherit);\n  font-size: inherit;\n  line-height: 34px;\n  text-align: inherit;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  cursor: pointer;\n  overflow: hidden;\n  scroll-snap-align: center;\n}\n\n:host .picker-item-empty,\n:host .picker-item.picker-item-disabled {\n  scroll-snap-align: none;\n  cursor: default;\n}\n\n:host .picker-item.picker-item-disabled {\n  opacity: 0.4;\n}\n\n:host(.picker-column-active) .picker-item.picker-item-active {\n  color: var(--ion-color-base);\n}\n\n@media (any-hover: hover) {\n  :host(:focus) {\n    outline: none;\n    background: rgba(var(--ion-color-base-rgb), 0.2);\n  }\n}\n:host .picker-item-active {\n  color: var(--ion-color-base);\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from '@stencil/core';\nimport { getIonMode } from '../../global/ionic-global';\nimport { getElementRoot, raf } from '../../utils/helpers';\nimport { hapticSelectionChanged, hapticSelectionEnd, hapticSelectionStart } from '../../utils/native/haptic';\nimport { isPlatform } from '../../utils/platform';\nimport { createColorClasses } from '../../utils/theme';\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n * @internal\n */\nexport class PickerColumnInternal {\n  constructor() {\n    this.isScrolling = false;\n    this.isColumnVisible = false;\n    this.canExitInputMode = true;\n    this.centerPickerItemInView = (target, smooth = true, canExitInputMode = true) => {\n      const { el, isColumnVisible } = this;\n      if (isColumnVisible) {\n        // (Vertical offset from parent) - (three empty picker rows) + (half the height of the target to ensure the scroll triggers)\n        const top = target.offsetTop - 3 * target.clientHeight + target.clientHeight / 2;\n        if (el.scrollTop !== top) {\n          /**\n           * Setting this flag prevents input\n           * mode from exiting in the picker column's\n           * scroll callback. This is useful when the user manually\n           * taps an item or types on the keyboard as both\n           * of these can cause a scroll to occur.\n           */\n          this.canExitInputMode = canExitInputMode;\n          el.scroll({\n            top,\n            left: 0,\n            behavior: smooth ? 'smooth' : undefined,\n          });\n        }\n      }\n    };\n    /**\n     * When ionInputModeChange is emitted, each column\n     * needs to check if it is the one being made available\n     * for text entry.\n     */\n    this.inputModeChange = (ev) => {\n      if (!this.numericInput) {\n        return;\n      }\n      const { useInputMode, inputModeColumn } = ev.detail;\n      /**\n       * If inputModeColumn is undefined then this means\n       * all numericInput columns are being selected.\n       */\n      const isColumnActive = inputModeColumn === undefined || inputModeColumn === this.el;\n      if (!useInputMode || !isColumnActive) {\n        this.setInputModeActive(false);\n        return;\n      }\n      this.setInputModeActive(true);\n    };\n    /**\n     * Setting isActive will cause a re-render.\n     * As a result, we do not want to cause the\n     * re-render mid scroll as this will cause\n     * the picker column to jump back to\n     * whatever value was selected at the\n     * start of the scroll interaction.\n     */\n    this.setInputModeActive = (state) => {\n      if (this.isScrolling) {\n        this.scrollEndCallback = () => {\n          this.isActive = state;\n        };\n        return;\n      }\n      this.isActive = state;\n    };\n    /**\n     * When the column scrolls, the component\n     * needs to determine which item is centered\n     * in the view and will emit an ionChange with\n     * the item object.\n     */\n    this.initializeScrollListener = () => {\n      /**\n       * The haptics for the wheel picker are\n       * an iOS-only feature. As a result, they should\n       * be disabled on Android.\n       */\n      const enableHaptics = isPlatform('ios');\n      const { el } = this;\n      let timeout;\n      let activeEl = this.activeItem;\n      const scrollCallback = () => {\n        raf(() => {\n          if (timeout) {\n            clearTimeout(timeout);\n            timeout = undefined;\n          }\n          if (!this.isScrolling) {\n            enableHaptics && hapticSelectionStart();\n            this.isScrolling = true;\n          }\n          /**\n           * Select item in the center of the column\n           * which is the month/year that we want to select\n           */\n          const bbox = el.getBoundingClientRect();\n          const centerX = bbox.x + bbox.width / 2;\n          const centerY = bbox.y + bbox.height / 2;\n          const activeElement = el.shadowRoot.elementFromPoint(centerX, centerY);\n          if (activeEl !== null) {\n            activeEl.classList.remove(PICKER_COL_ACTIVE);\n          }\n          if (activeElement === null || activeElement.disabled) {\n            return;\n          }\n          /**\n           * If we are selecting a new value,\n           * we need to run haptics again.\n           */\n          if (activeElement !== activeEl) {\n            enableHaptics && hapticSelectionChanged();\n            if (this.canExitInputMode) {\n              /**\n               * The native iOS wheel picker\n               * only dismisses the keyboard\n               * once the selected item has changed\n               * as a result of a swipe\n               * from the user. If `canExitInputMode` is\n               * `false` then this means that the\n               * scroll is happening as a result of\n               * the `value` property programmatically changing\n               * either by an application or by the user via the keyboard.\n               */\n              this.exitInputMode();\n            }\n          }\n          activeEl = activeElement;\n          activeElement.classList.add(PICKER_COL_ACTIVE);\n          timeout = setTimeout(() => {\n            this.isScrolling = false;\n            enableHaptics && hapticSelectionEnd();\n            /**\n             * Certain tasks (such as those that\n             * cause re-renders) should only be done\n             * once scrolling has finished, otherwise\n             * flickering may occur.\n             */\n            const { scrollEndCallback } = this;\n            if (scrollEndCallback) {\n              scrollEndCallback();\n              this.scrollEndCallback = undefined;\n            }\n            /**\n             * Reset this flag as the\n             * next scroll interaction could\n             * be a scroll from the user. In this\n             * case, we should exit input mode.\n             */\n            this.canExitInputMode = true;\n            const dataIndex = activeElement.getAttribute('data-index');\n            /**\n             * If no value it is\n             * possible we hit one of the\n             * empty padding columns.\n             */\n            if (dataIndex === null) {\n              return;\n            }\n            const index = parseInt(dataIndex, 10);\n            const selectedItem = this.items[index];\n            if (selectedItem.value !== this.value) {\n              this.setValue(selectedItem.value);\n            }\n          }, 250);\n        });\n      };\n      /**\n       * Wrap this in an raf so that the scroll callback\n       * does not fire when component is initially shown.\n       */\n      raf(() => {\n        el.addEventListener('scroll', scrollCallback);\n        this.destroyScrollListener = () => {\n          el.removeEventListener('scroll', scrollCallback);\n        };\n      });\n    };\n    /**\n     * Tells the parent picker to\n     * exit text entry mode. This is only called\n     * when the selected item changes during scroll, so\n     * we know that the user likely wants to scroll\n     * instead of type.\n     */\n    this.exitInputMode = () => {\n      const { parentEl } = this;\n      if (parentEl == null)\n        return;\n      parentEl.exitInputMode();\n      /**\n       * setInputModeActive only takes\n       * effect once scrolling stops to avoid\n       * a component re-render while scrolling.\n       * However, we want the visual active\n       * indicator to go away immediately, so\n       * we call classList.remove here.\n       */\n      this.el.classList.remove('picker-column-active');\n    };\n    this.isActive = false;\n    this.items = [];\n    this.value = undefined;\n    this.color = 'primary';\n    this.numericInput = false;\n  }\n  valueChange() {\n    if (this.isColumnVisible) {\n      /**\n       * Only scroll the active item into view when the picker column\n       * is actively visible to the user.\n       */\n      this.scrollActiveItemIntoView();\n    }\n  }\n  /**\n   * Only setup scroll listeners\n   * when the picker is visible, otherwise\n   * the container will have a scroll\n   * height of 0px.\n   */\n  componentWillLoad() {\n    const visibleCallback = (entries) => {\n      var _a;\n      const ev = entries[0];\n      if (ev.isIntersecting) {\n        this.isColumnVisible = true;\n        /**\n         * Because this initial call to scrollActiveItemIntoView has to fire before\n         * the scroll listener is set up, we need to manage the active class manually.\n         */\n        const oldActive = getElementRoot(this.el).querySelector(`.${PICKER_COL_ACTIVE}`);\n        oldActive === null || oldActive === void 0 ? void 0 : oldActive.classList.remove(PICKER_COL_ACTIVE);\n        this.scrollActiveItemIntoView();\n        (_a = this.activeItem) === null || _a === void 0 ? void 0 : _a.classList.add(PICKER_COL_ACTIVE);\n        this.initializeScrollListener();\n      }\n      else {\n        this.isColumnVisible = false;\n        if (this.destroyScrollListener) {\n          this.destroyScrollListener();\n          this.destroyScrollListener = undefined;\n        }\n      }\n    };\n    new IntersectionObserver(visibleCallback, { threshold: 0.001 }).observe(this.el);\n    const parentEl = (this.parentEl = this.el.closest('ion-picker-internal'));\n    if (parentEl !== null) {\n      // TODO(FW-2832): type\n      parentEl.addEventListener('ionInputModeChange', (ev) => this.inputModeChange(ev));\n    }\n  }\n  componentDidRender() {\n    var _a;\n    const { activeItem, items, isColumnVisible, value } = this;\n    if (isColumnVisible) {\n      if (activeItem) {\n        this.scrollActiveItemIntoView();\n      }\n      else if (((_a = items[0]) === null || _a === void 0 ? void 0 : _a.value) !== value) {\n        /**\n         * If the picker column does not have an active item and the current value\n         * does not match the first item in the picker column, that means\n         * the value is out of bounds. In this case, we assign the value to the\n         * first item to match the scroll position of the column.\n         *\n         */\n        this.setValue(items[0].value);\n      }\n    }\n  }\n  /** @internal  */\n  async scrollActiveItemIntoView() {\n    const activeEl = this.activeItem;\n    if (activeEl) {\n      this.centerPickerItemInView(activeEl, false, false);\n    }\n  }\n  /**\n   * Sets the value prop and fires the ionChange event.\n   * This is used when we need to fire ionChange from\n   * user-generated events that cannot be caught with normal\n   * input/change event listeners.\n   * @internal\n   */\n  async setValue(value) {\n    const { items } = this;\n    this.value = value;\n    const findItem = items.find((item) => item.value === value && item.disabled !== true);\n    if (findItem) {\n      this.ionChange.emit(findItem);\n    }\n  }\n  get activeItem() {\n    return getElementRoot(this.el).querySelector(`.picker-item[data-value=\"${this.value}\"]:not([disabled])`);\n  }\n  render() {\n    const { items, color, isActive, numericInput } = this;\n    const mode = getIonMode(this);\n    return (h(Host, { tabindex: 0, class: createColorClasses(color, {\n        [mode]: true,\n        ['picker-column-active']: isActive,\n        ['picker-column-numeric-input']: numericInput,\n      }) }, h(\"div\", { class: \"picker-item picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\"), h(\"div\", { class: \"picker-item picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\"), h(\"div\", { class: \"picker-item picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\"), items.map((item, index) => {\n      {\n        /*\n        Users should be able to tab\n        between multiple columns. As a result,\n        we set tabindex here so that tabbing switches\n        between columns instead of buttons. Users\n        can still use arrow keys on the keyboard to\n        navigate the column up and down.\n      */\n      }\n      return (h(\"button\", { tabindex: \"-1\", class: {\n          'picker-item': true,\n          'picker-item-disabled': item.disabled || false,\n        }, \"data-value\": item.value, \"data-index\": index, onClick: (ev) => {\n          this.centerPickerItemInView(ev.target, true);\n        }, disabled: item.disabled }, item.text));\n    }), h(\"div\", { class: \"picker-item picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\"), h(\"div\", { class: \"picker-item picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\"), h(\"div\", { class: \"picker-item picker-item-empty\", \"aria-hidden\": \"true\" }, \"\\u00A0\")));\n  }\n  static get is() { return \"ion-picker-column-internal\"; }\n  static get encapsulation() { return \"shadow\"; }\n  static get originalStyleUrls() {\n    return {\n      \"ios\": [\"picker-column-internal.ios.scss\"],\n      \"md\": [\"picker-column-internal.md.scss\"]\n    };\n  }\n  static get styleUrls() {\n    return {\n      \"ios\": [\"picker-column-internal.ios.css\"],\n      \"md\": [\"picker-column-internal.md.css\"]\n    };\n  }\n  static get properties() {\n    return {\n      \"items\": {\n        \"type\": \"unknown\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"PickerColumnItem[]\",\n          \"resolved\": \"PickerColumnItem[]\",\n          \"references\": {\n            \"PickerColumnItem\": {\n              \"location\": \"import\",\n              \"path\": \"./picker-column-internal-interfaces\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"A list of options to be displayed in the picker\"\n        },\n        \"defaultValue\": \"[]\"\n      },\n      \"value\": {\n        \"type\": \"any\",\n        \"mutable\": true,\n        \"complexType\": {\n          \"original\": \"string | number\",\n          \"resolved\": \"number | string | undefined\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The selected option in the picker.\"\n        },\n        \"attribute\": \"value\",\n        \"reflect\": false\n      },\n      \"color\": {\n        \"type\": \"string\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"Color\",\n          \"resolved\": \"\\\"danger\\\" | \\\"dark\\\" | \\\"light\\\" | \\\"medium\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"success\\\" | \\\"tertiary\\\" | \\\"warning\\\" | string & Record<never, never> | undefined\",\n          \"references\": {\n            \"Color\": {\n              \"location\": \"import\",\n              \"path\": \"../../interface\"\n            }\n          }\n        },\n        \"required\": false,\n        \"optional\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"The color to use from your application's color palette.\\nDefault options are: `\\\"primary\\\"`, `\\\"secondary\\\"`, `\\\"tertiary\\\"`, `\\\"success\\\"`, `\\\"warning\\\"`, `\\\"danger\\\"`, `\\\"light\\\"`, `\\\"medium\\\"`, and `\\\"dark\\\"`.\\nFor more information on colors, see [theming](/docs/theming/basics).\"\n        },\n        \"attribute\": \"color\",\n        \"reflect\": true,\n        \"defaultValue\": \"'primary'\"\n      },\n      \"numericInput\": {\n        \"type\": \"boolean\",\n        \"mutable\": false,\n        \"complexType\": {\n          \"original\": \"boolean\",\n          \"resolved\": \"boolean\",\n          \"references\": {}\n        },\n        \"required\": false,\n        \"optional\": false,\n        \"docs\": {\n          \"tags\": [{\n              \"name\": \"internal\",\n              \"text\": undefined\n            }],\n          \"text\": \"If `true`, tapping the picker will\\nreveal a number input keyboard that lets\\nthe user type in values for each picker\\ncolumn. This is useful when working\\nwith time pickers.\"\n        },\n        \"attribute\": \"numeric-input\",\n        \"reflect\": false,\n        \"defaultValue\": \"false\"\n      }\n    };\n  }\n  static get states() {\n    return {\n      \"isActive\": {}\n    };\n  }\n  static get events() {\n    return [{\n        \"method\": \"ionChange\",\n        \"name\": \"ionChange\",\n        \"bubbles\": true,\n        \"cancelable\": true,\n        \"composed\": true,\n        \"docs\": {\n          \"tags\": [],\n          \"text\": \"Emitted when the value has changed.\"\n        },\n        \"complexType\": {\n          \"original\": \"PickerColumnItem\",\n          \"resolved\": \"PickerColumnItem\",\n          \"references\": {\n            \"PickerColumnItem\": {\n              \"location\": \"import\",\n              \"path\": \"./picker-column-internal-interfaces\"\n            }\n          }\n        }\n      }];\n  }\n  static get methods() {\n    return {\n      \"scrollActiveItemIntoView\": {\n        \"complexType\": {\n          \"signature\": \"() => Promise<void>\",\n          \"parameters\": [],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<void>\"\n        },\n        \"docs\": {\n          \"text\": \"\",\n          \"tags\": [{\n              \"name\": \"internal\",\n              \"text\": undefined\n            }]\n        }\n      },\n      \"setValue\": {\n        \"complexType\": {\n          \"signature\": \"(value?: string | number) => Promise<void>\",\n          \"parameters\": [{\n              \"tags\": [],\n              \"text\": \"\"\n            }],\n          \"references\": {\n            \"Promise\": {\n              \"location\": \"global\"\n            }\n          },\n          \"return\": \"Promise<void>\"\n        },\n        \"docs\": {\n          \"text\": \"Sets the value prop and fires the ionChange event.\\nThis is used when we need to fire ionChange from\\nuser-generated events that cannot be caught with normal\\ninput/change event listeners.\",\n          \"tags\": [{\n              \"name\": \"internal\",\n              \"text\": undefined\n            }]\n        }\n      }\n    };\n  }\n  static get elementRef() { return \"el\"; }\n  static get watchers() {\n    return [{\n        \"propName\": \"value\",\n        \"methodName\": \"valueChange\"\n      }];\n  }\n}\nconst PICKER_COL_ACTIVE = 'picker-item-active';\n"],"version":3}