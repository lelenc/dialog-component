{"file":"translation.js","mappings":"MAAa,cAAc,GAAG,OAAO,MAAc;EACjD,IAAI,QAAQ,GAA2B,EAAE,CAAC;EAE1C,IAAI,MAAM,KAAK,IAAI,EAAE;IACnB,MAAM,QAAQ,GAAG,MAAM,OAAO,qBAAuC,CAAC,CAAC;IACvE,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC;GAC7B;OAAM,IAAI,MAAM,KAAK,IAAI,EAAE;IAC1B,MAAM,QAAQ,GAAG,MAAM,OAAO,qBAAuC,CAAC,CAAC;IACvE,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC;GAC7B;EAED,OAAO,QAAQ,CAAC;AAClB;;;;","names":[],"sources":["./src/language/translation.ts"],"sourcesContent":["export const getIntlMessage = async (locale: string): Promise<Record<string, string>> => {\r\n  let messages: Record<string, string> = {};\r\n\r\n  if (locale === 'en') {\r\n    const response = await import(`../assets/locales/en.translation.json`);\r\n    messages = response.default;\r\n  } else if (locale === 'hu') {\r\n    const response = await import(`../assets/locales/hu.translation.json`);\r\n    messages = response.default;\r\n  }\r\n\r\n  return messages;\r\n};\r\n\r\nexport const getIntlMessageFormatted = (message: string, values: string[]): string => {\r\n  return message.replace(/{(\\d+)}/g, (_match, index) => {\r\n    return values[index] || '';\r\n  });\r\n};"],"version":3}