{"file":"keyboard-controller.js","mappings":"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","names":[],"sources":["./node_modules/@ionic/core/dist/collection/utils/keyboard/keyboard-controller.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { doc, win } from \"../browser/index\";\nimport { KeyboardResize, Keyboard } from '../native/keyboard';\n/**\n * The element that resizes when the keyboard opens\n * is going to depend on the resize mode\n * which is why we check that here.\n */\nconst getResizeContainer = (resizeMode) => {\n  /**\n   * If doc is undefined then we are\n   * in an SSR environment, so the keyboard\n   * adjustment does not apply.\n   * If the webview does not resize then there\n   * is no container to resize.\n   */\n  if (doc === undefined || resizeMode === KeyboardResize.None || resizeMode === undefined) {\n    return null;\n  }\n  /**\n   * The three remaining resize modes: Native, Ionic, and Body\n   * all cause `ion-app` to resize, so we can listen for changes\n   * on that. In the event `ion-app` is not available then\n   * we can fall back to `body`.\n   */\n  const ionApp = doc.querySelector('ion-app');\n  return ionApp !== null && ionApp !== void 0 ? ionApp : doc.body;\n};\n/**\n * Get the height of ion-app or body.\n * This is used for determining if the webview\n * has resized before the keyboard closed.\n * */\nconst getResizeContainerHeight = (resizeMode) => {\n  const containerElement = getResizeContainer(resizeMode);\n  return containerElement === null ? 0 : containerElement.clientHeight;\n};\n/**\n * Creates a controller that tracks and reacts to opening or closing the keyboard.\n *\n * @internal\n * @param keyboardChangeCallback A function to call when the keyboard opens or closes.\n */\nexport const createKeyboardController = async (keyboardChangeCallback) => {\n  let keyboardWillShowHandler;\n  let keyboardWillHideHandler;\n  let keyboardVisible;\n  /**\n   * This lets us determine if the webview content\n   * has resized as a result of the keyboard.\n   */\n  let initialResizeContainerHeight;\n  const init = async () => {\n    const resizeOptions = await Keyboard.getResizeMode();\n    const resizeMode = resizeOptions === undefined ? undefined : resizeOptions.mode;\n    keyboardWillShowHandler = () => {\n      /**\n       * We need to compute initialResizeContainerHeight right before\n       * the keyboard opens to guarantee the resize container is visible.\n       * The resize container may not be visible if we compute this\n       * as soon as the keyboard controller is created.\n       * We should only need to do this once to avoid additional clientHeight\n       * computations.\n       */\n      if (initialResizeContainerHeight === undefined) {\n        initialResizeContainerHeight = getResizeContainerHeight(resizeMode);\n      }\n      keyboardVisible = true;\n      fireChangeCallback(keyboardVisible, resizeMode);\n    };\n    keyboardWillHideHandler = () => {\n      keyboardVisible = false;\n      fireChangeCallback(keyboardVisible, resizeMode);\n    };\n    win === null || win === void 0 ? void 0 : win.addEventListener('keyboardWillShow', keyboardWillShowHandler);\n    win === null || win === void 0 ? void 0 : win.addEventListener('keyboardWillHide', keyboardWillHideHandler);\n  };\n  const fireChangeCallback = (state, resizeMode) => {\n    if (keyboardChangeCallback) {\n      keyboardChangeCallback(state, createResizePromiseIfNeeded(resizeMode));\n    }\n  };\n  /**\n   * Code responding to keyboard lifecycles may need\n   * to show/hide content once the webview has\n   * resized as a result of the keyboard showing/hiding.\n   * createResizePromiseIfNeeded provides a way for code to wait for the\n   * resize event that was triggered as a result of the keyboard.\n   */\n  const createResizePromiseIfNeeded = (resizeMode) => {\n    if (\n    /**\n     * If we are in an SSR environment then there is\n     * no window to resize. Additionally, if there\n     * is no resize mode or the resize mode is \"None\"\n     * then initialResizeContainerHeight will be 0\n     */\n    initialResizeContainerHeight === 0 ||\n      /**\n       * If the keyboard is closed before the webview resizes initially\n       * then the webview will never resize.\n       */\n      initialResizeContainerHeight === getResizeContainerHeight(resizeMode)) {\n      return;\n    }\n    /**\n     * Get the resize container so we can\n     * attach the ResizeObserver below to\n     * the correct element.\n     */\n    const containerElement = getResizeContainer(resizeMode);\n    if (containerElement === null) {\n      return;\n    }\n    /**\n     * Some part of the web content should resize,\n     * and we need to listen for a resize.\n     */\n    return new Promise((resolve) => {\n      const callback = () => {\n        /**\n         * As per the spec, the ResizeObserver\n         * will fire when observation starts if\n         * the observed element is rendered and does not\n         * have a size of 0 x 0. However, the watched element\n         * may or may not have resized by the time this first\n         * callback is fired. As a result, we need to check\n         * the dimensions of the element.\n         *\n         * https://www.w3.org/TR/resize-observer/#intro\n         */\n        if (containerElement.clientHeight === initialResizeContainerHeight) {\n          /**\n           * The resize happened, so stop listening\n           * for resize on this element.\n           */\n          ro.disconnect();\n          resolve();\n        }\n      };\n      /**\n       * In Capacitor there can be delay between when the window\n       * resizes and when the container element resizes, so we cannot\n       * rely on a 'resize' event listener on the window.\n       * Instead, we need to determine when the container\n       * element resizes using a ResizeObserver.\n       */\n      const ro = new ResizeObserver(callback);\n      ro.observe(containerElement);\n    });\n  };\n  const destroy = () => {\n    win === null || win === void 0 ? void 0 : win.removeEventListener('keyboardWillShow', keyboardWillShowHandler);\n    win === null || win === void 0 ? void 0 : win.removeEventListener('keyboardWillHide', keyboardWillHideHandler);\n    keyboardWillShowHandler = keyboardWillHideHandler = undefined;\n  };\n  const isKeyboardVisible = () => keyboardVisible;\n  await init();\n  return { init, destroy, isKeyboardVisible };\n};\n"],"version":3}