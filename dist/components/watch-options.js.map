{"file":"watch-options.js","mappings":"AAAA;AACA;AACA;AACA;AACY,MAAC,eAAe,GAAG,CAAC,WAAW,EAAE,OAAO,EAAE,QAAQ,KAAK;AACnE,EAAE,IAAI,OAAO,gBAAgB,KAAK,WAAW,EAAE;AAC/C,IAAI,OAAO;AACX,GAAG;AACH,EAAE,MAAM,QAAQ,GAAG,IAAI,gBAAgB,CAAC,CAAC,YAAY,KAAK;AAC1D,IAAI,QAAQ,CAAC,iBAAiB,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC,CAAC;AACvD,GAAG,CAAC,CAAC;AACL,EAAE,QAAQ,CAAC,OAAO,CAAC,WAAW,EAAE;AAChC,IAAI,SAAS,EAAE,IAAI;AACnB,IAAI,OAAO,EAAE,IAAI;AACjB,GAAG,CAAC,CAAC;AACL,EAAE,OAAO,QAAQ,CAAC;AAClB,EAAE;AACF,MAAM,iBAAiB,GAAG,CAAC,YAAY,EAAE,OAAO,KAAK;AACrD,EAAE,IAAI,SAAS,CAAC;AAChB,EAAE,YAAY,CAAC,OAAO,CAAC,CAAC,GAAG,KAAK;AAChC;AACA,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACpD,MAAM,SAAS,GAAG,iBAAiB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,IAAI,SAAS,CAAC;AAC7E,KAAK;AACL,GAAG,CAAC,CAAC;AACL,EAAE,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC;AACK,MAAM,iBAAiB,GAAG,CAAC,EAAE,EAAE,OAAO,KAAK;AAClD,EAAE,IAAI,EAAE,CAAC,QAAQ,KAAK,CAAC,EAAE;AACzB,IAAI,OAAO,SAAS,CAAC;AACrB,GAAG;AACH,EAAE,MAAM,OAAO,GAAG,EAAE,CAAC,OAAO,KAAK,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC;AACzG,EAAE,OAAO,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,KAAK,EAAE,CAAC,KAAK,CAAC,CAAC;AACnD,CAAC;;;;","names":[],"sources":["./node_modules/@ionic/core/dist/collection/utils/watch-options.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\n// TODO(FW-2832): types\nexport const watchForOptions = (containerEl, tagName, onChange) => {\n  if (typeof MutationObserver === 'undefined') {\n    return;\n  }\n  const mutation = new MutationObserver((mutationList) => {\n    onChange(getSelectedOption(mutationList, tagName));\n  });\n  mutation.observe(containerEl, {\n    childList: true,\n    subtree: true,\n  });\n  return mutation;\n};\nconst getSelectedOption = (mutationList, tagName) => {\n  let newOption;\n  mutationList.forEach((mut) => {\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (let i = 0; i < mut.addedNodes.length; i++) {\n      newOption = findCheckedOption(mut.addedNodes[i], tagName) || newOption;\n    }\n  });\n  return newOption;\n};\nexport const findCheckedOption = (el, tagName) => {\n  if (el.nodeType !== 1) {\n    return undefined;\n  }\n  const options = el.tagName === tagName.toUpperCase() ? [el] : Array.from(el.querySelectorAll(tagName));\n  return options.find((o) => o.value === el.value);\n};\n"],"version":3}