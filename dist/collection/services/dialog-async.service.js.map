{"version":3,"file":"dialog-async.service.js","sourceRoot":"","sources":["../../../src/services/dialog-async.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable, combineLatest, from } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { serverUrl } from \"../../config.json\";\r\nimport { Answer, DialogData, DialogMetadata } from \"../interfaces/dialog-interfaces\";\r\n\r\nexport class DialogAsyncService {\r\n\r\n    private serviceUrl: string = `${serverUrl}/emerald/rest/api/v1/product-finder`;\r\n    sessionId: string;\r\n    dialogIri: string;\r\n    endpointId: string;\r\n\r\n    constructor() { }\r\n\r\n    startWithIri(iri: string, lang: string, answers?: Answer[], stored?: boolean): Observable<{ data: DialogData, metadata: DialogMetadata }> {\r\n        const data$ = fetch(`${this.serviceUrl}?stored=${stored}`, {\r\n            method: 'POST',\r\n            body: JSON.stringify({ iri, lang, answers }),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(response => response.json()) as Promise<DialogData>;\r\n\r\n        const metadata$ = fetch(`${this.serviceUrl}/dialogByIri?iri=${iri}&lang=${lang}`)\r\n            .then(response => response.json()) as Promise<DialogMetadata>;\r\n\r\n        return combineLatest([data$, metadata$]).pipe(\r\n            map(([data, metadata]) => ({ data, metadata }))\r\n        );\r\n\r\n    }\r\n\r\n    startWithCaseId(caseId: string, date: string, lang: string, answers?: Answer[], stored?: boolean): Observable<{ data: DialogData, metadata: DialogMetadata }> {\r\n        const data$ = fetch(`${this.serviceUrl}?stored=${stored}`, {\r\n            method: 'POST',\r\n            body: JSON.stringify({ caseId, date, lang, answers }),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(response => response.json()) as Promise<DialogData>;\r\n\r\n        const metadata$ = fetch(`${this.serviceUrl}/dialog?caseId=${caseId}&date=${date}`)\r\n            .then(response => response.json()) as Promise<DialogMetadata>;\r\n\r\n        return combineLatest([data$, metadata$]).pipe(\r\n            map(([data, metadata]) => ({ data, metadata }))\r\n        );\r\n    }\r\n\r\n    getSession(): Observable<any> {\r\n        return from(fetch(`${this.serviceUrl}/${this.sessionId}`).then(response => response.json()));\r\n    }\r\n\r\n    answer(body: Answer): Observable<any> {\r\n        return from(fetch(`${this.serviceUrl}/${this.sessionId}/answers`, {\r\n            method: 'POST',\r\n            body: JSON.stringify(body),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(response => response.json()));\r\n    }\r\n\r\n    revokeAnswer(body: Answer): Observable<any> {\r\n        return from(fetch(`${this.serviceUrl}/${this.sessionId}/answers`, {\r\n            method: 'PUT',\r\n            body: JSON.stringify(body),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(response => response.json()));\r\n    }\r\n\r\n    getDialogMetadata(iri: string, lang: string): Observable<any> {\r\n        return from(fetch(`${this.serviceUrl}/dialogByIri?iri=${iri}&lang=${lang}`).then(response => response.json()));\r\n    }\r\n\r\n\r\n}"]}